#!/usr/bin/env node
/**
 * Web Scraper MCP Server
 * Crawls websites, extracts content, and publishes to GitHub
 * Generated by KEN-MCP with production enhancements
 */

// Load environment variables from .env file
import dotenv from 'dotenv';
dotenv.config();

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { setupTools } from './tools.js';
import { setupResources } from './resources.js';
import { setupPrompts } from './prompts.js';

// Production logger - MUST use stderr for MCP servers
const logger = {
  error: (message: string, context?: any) => {
    console.error(
      `[ERROR] ${new Date().toISOString()} ${message}`,
      context ? JSON.stringify(context) : ''
    );
  },
  warn: (message: string, context?: any) => {
    console.error(
      `[WARN] ${new Date().toISOString()} ${message}`,
      context ? JSON.stringify(context) : ''
    );
  },
  info: (message: string, context?: any) => {
    console.error(
      `[INFO] ${new Date().toISOString()} ${message}`,
      context ? JSON.stringify(context) : ''
    );
  },
};

/**
 * Initialize the Web Scraper MCP server with enhanced capabilities
 */
const server = new Server(
  {
    name: 'web-scraper-mcp',
    version: '1.0.0',
  },
  {
    capabilities: {
      tools: {},
      resources: {},
      prompts: {},
    },
  }
);

// Override protocol version handling to accept any version
(server as any).protocolVersion = '2025-03-26';

/**
 * Configure server components with error handling
 */
try {
  setupTools(server);
  logger.info('Tools configured successfully');
} catch (error) {
  logger.error('Failed to setup tools', {
    error: error instanceof Error ? error.message : String(error),
    stack: error instanceof Error ? error.stack : undefined,
  });
  throw error;
}

try {
  setupResources(server);
  logger.info('Resources configured successfully');
} catch (error) {
  logger.error('Failed to setup resources', {
    error: error instanceof Error ? error.message : String(error),
    stack: error instanceof Error ? error.stack : undefined,
  });
  throw error;
}

try {
  setupPrompts(server);
  logger.info('Prompts configured successfully');
} catch (error) {
  logger.error('Failed to setup prompts', {
    error: error instanceof Error ? error.message : String(error),
    stack: error instanceof Error ? error.stack : undefined,
  });
  throw error;
}

/**
 * Start the Web Scraper MCP server with comprehensive error handling
 */
async function main(): Promise<void> {
  try {
    logger.info('Starting Web Scraper MCP server...');

    // Ensure stdout is unbuffered for SSE
    if (process.stdout.isTTY === false) {
      process.stdout.setDefaultEncoding('utf-8');
    }

    const transport = new StdioServerTransport();
    await server.connect(transport);

    logger.info('Web Scraper MCP server started successfully', {
      serverName: 'web-scraper-mcp',
      version: '1.0.0',
      capabilities: ['tools', 'resources', 'prompts'],
    });
  } catch (error) {
    logger.error('Failed to start Web Scraper MCP server', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      type: error?.constructor?.name,
    });
    process.exit(1);
  }
}

/**
 * Handle process events for graceful shutdown
 */
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Promise Rejection', {
    reason: String(reason),
    promise: String(promise),
  });
});

process.on('uncaughtException', error => {
  logger.error('Uncaught Exception', {
    error: error.message,
    stack: error.stack,
  });
  process.exit(1);
});

process.on('SIGINT', () => {
  logger.info('Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

// Start the server
main();
